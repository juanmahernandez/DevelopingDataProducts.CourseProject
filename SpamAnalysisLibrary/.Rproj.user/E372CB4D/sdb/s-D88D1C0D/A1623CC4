{
    "collab_server" : "",
    "contents" : "#' Building model for Spam Analysis.\n#'\n#' @param spamData a data frame with the words specified, and one column named type where is stored if spam or not\n#' @return a model for predicting the clasification based on the input\n#' @author Juan Manuel Hernandez\n#' @details\n#' This function creates a model depending on the input, and save it in the file\n#' model.rda\n#' @import caret kernlab beepr randomForest\n#' @export\nbuildModel <- function(spamData) {\n\n    inTrain <- createDataPartition(y = spamData$type, p=0.6, list=FALSE)\n\n    training <- spamData[inTrain, ]\n    testing <- spamData[-inTrain, ]\n\n    set.seed(1234)\n    modfitSpam <- train(type ~ ., data = training, method = \"rf\",\n                        trControl = trainControl(method = \"cv\"),\n                        preProcess = c(\"center\", \"scale\"))\n\n    pr <- predict(modfitSpam, newdata = testing)\n    confusionMatrix(pr, testing$type)\n\n    save(modfitSpam, file = \"model/spamModel.rda\")\n    beep(4)\n}\n\n\n#' Predicting if it's spam or not based on the string and model\n#' @param stringToCheck a sentence to predict if it's spam or not\n#' @return a string with the result\n#' @author Juan Manuel Hernandez\n#' @details\n#' This function predict from the model, loading the model from a file named\n#' model.rda, the classification of the sentence\n#' @import dplyr stringi\n#' @export\ncheckSpam <- function(stringToCheck) {\n\n    if(nchar(stringToCheck) == 0) {\n        \"Please insert a sentence\"\n    }\n    else if(!file.exists(\"model/spamModel.rda\")) {\n        \"No model loaded\"\n    }\n    else\n    {\n        load(\"model/spamModel.rda\")\n\n        set.seed(12345)\n        getCharFreq <- function(strPattern, paramStringToCheck, ignoreCase = TRUE) {\n            resultReg <- gregexpr(strPattern, paramStringToCheck, ignore.case = ignoreCase, perl = F, useBytes = F)\n            wordList <- data.frame(word = unlist(regmatches(paramStringToCheck, resultReg)))\n            wordList\n        }\n\n        stringToCheckWords <- tolower(stringToCheck)\n        wordList <- getCharFreq(\"\\\\w+\", stringToCheckWords)\n        totalWords <- nrow(wordList)\n\n        totalChars <- nchar(stringToCheck)\n\n        listSentenceWords <- wordList %>% group_by(word) %>% summarize(count = (n()/totalWords) * 100)\n\n        stringToPredict <- c()\n        for (i in 1:length(modfitSpam$coefnames))\n        {\n            if(length(listSentenceWords[listSentenceWords$word == modfitSpam$coefnames[i],]$count) == 0)\n                stringToPredict <- cbind(stringToPredict, 0)\n            else\n                stringToPredict <- cbind(stringToPredict, listSentenceWords[listSentenceWords$word == modfitSpam$coefnames[i],]$count)\n        }\n        colnames(stringToPredict)<- make.names(modfitSpam$coefnames)\n\n        # Numbers\n        # modfitSpam$coefnames[grep(\"^num*\", modfitSpam$coefnames)]\n\n        ## num3d\n        stringToPredict[, \"num3d\"] = (nrow(getCharFreq(\"(3d)+\", stringToCheckWords)) / totalWords) * 100\n\n        ## num000\n        stringToPredict[, \"num000\"] = (nrow(getCharFreq(\"(000)+\", stringToCheckWords)) / totalWords) * 100\n\n        ## num650\n        stringToPredict[, \"num650\"] = (nrow(getCharFreq(\"(650)+\", stringToCheckWords)) / totalWords) * 100\n\n        ## num857\n        stringToPredict[, \"num857\"] = (nrow(getCharFreq(\"(857)+\", stringToCheckWords)) / totalWords) * 100\n\n        ## num415\n        stringToPredict[, \"num415\"] = (nrow(getCharFreq(\"(415)+\", stringToCheckWords)) / totalWords) * 100\n\n        ## num85\n        stringToPredict[, \"num85\"] = (nrow(getCharFreq(\"(85)+\", stringToCheckWords)) / totalWords) * 100\n\n        ## num1999\n        stringToPredict[, \"num1999\"] = (nrow(getCharFreq(\"(1999)+\", stringToCheckWords)) / totalWords) * 100\n\n\n        # Special Characters\n        #modfitSpam$coefnames[grep(\"^char*\", modfitSpam$coefnames)]\n\n        # charSemicolon\n        stringToPredict[, \"charSemicolon\"] = (nrow(getCharFreq(\"(;)+\", stringToCheckWords)) / totalChars) * 100\n\n        # charRoundbracket\n        stringToPredict[, \"charRoundbracket\"] = (nrow(getCharFreq(\"(\\\\())+\", stringToCheckWords)) / totalChars) * 100\n\n        # charSquarebracket\n        stringToPredict[, \"charSquarebracket\"] = (nrow(getCharFreq(\"(\\\\[)+\", stringToCheckWords)) / totalChars) * 100\n\n        # charExclamation\n        stringToPredict[, \"charExclamation\"] = (nrow(getCharFreq(\"(!)+\", stringToCheckWords)) / totalChars) * 100\n\n        # charDollar\n        stringToPredict[, \"charDollar\"] = (nrow(getCharFreq(\"(\\\\$)+\", stringToCheckWords)) / totalChars) * 100\n\n        # charHash\n        stringToPredict[, \"charHash\"] = (nrow(getCharFreq(\"(#)+\", stringToCheckWords)) / totalChars) * 100\n\n        # Capital Characters\n        # modfitSpam$coefnames[grep(\"^capital*\", modfitSpam$coefnames)]\n        capital <- getCharFreq(\"[A-Z]+\", stringToCheck, FALSE)\n\n        if(nrow(capital) > 0) {\n            # capitalAve\n            stringToPredict[, \"capitalAve\"] = mean(sapply(as.list(capital$word), stri_length))\n\n            # capitalLong\n            stringToPredict[, \"capitalLong\"] = max(sapply(as.list(capital$word), stri_length))\n\n            # capitalTotal\n            stringToPredict[, \"capitalTotal\"] = nrow(getCharFreq(\"[A-Z]\", stringToCheck, FALSE))\n        } else {\n            # capitalAve\n            stringToPredict[, \"capitalAve\"] = 0\n\n            # capitalLong\n            stringToPredict[, \"capitalLong\"] = 0\n\n            # capitalTotal\n            stringToPredict[, \"capitalTotal\"] = 0\n        }\n\n        pr <- predict(modfitSpam, newdata = stringToPredict)\n        as.character(pr[1])\n    }\n}\n",
    "created" : 1474859716737.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1467321064",
    "id" : "A1623CC4",
    "lastKnownWriteTime" : 1474851435,
    "last_content_update" : 1474851435,
    "path" : "~/Documents/Proyectos/R/8. Developing Data Products/Project Course/SpamAnalysisLibrary/R/spamAnalysis.R",
    "project_path" : "R/spamAnalysis.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}